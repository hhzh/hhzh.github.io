import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,o as e}from"./app-17qzZVk7.js";const p={};function c(o,n){return e(),s("div",null,n[0]||(n[0]=[t(`<p>在 Java 领域，Google Guava 库中的 <code>Cache</code> 模块曾经是本地缓存的事实标准，被广泛应用。然而，随着时间的推移，特别是在对性能要求更高的场景下，另一个优秀的本地缓存库 <strong>Caffeine</strong> 崭露头角，并被证明在性能上优于 Guava Cache，甚至在 Spring 5 及 Spring Boot 2 以后成为了默认推荐的缓存实现。</p><p>理解本地缓存的原理，掌握 Guava Cache 和 Caffeine 这两个常用库的使用方式，并能够清晰地对比它们的优缺点、选择适用场景，是进行应用性能优化和应对面试官考察的关键。</p><p>今天，就让我们一起深入 Guava Cache 与 Caffeine 的世界，看看如何选择和使用这两个本地缓存利器！</p><hr><h2 id="caffeine-cache-深度解析与-guava-cache-对比-本地缓存选型指南" tabindex="-1"><a class="header-anchor" href="#caffeine-cache-深度解析与-guava-cache-对比-本地缓存选型指南"><span>Caffeine Cache 深度解析与 Guava Cache 对比：本地缓存选型指南</span></a></h2><h3 id="引言-缓存是优化性能的利器" tabindex="-1"><a class="header-anchor" href="#引言-缓存是优化性能的利器"><span>引言：缓存是优化性能的利器</span></a></h3><p>在很多应用场景下，数据的访问遵循“二八定律”——少量数据被频繁访问。将这部分热点数据存入缓存，可以直接从内存获取，而无需每次都从慢速存储（如磁盘）或远程服务加载。</p><ul><li><strong>本地缓存的必要性：</strong> 对于单个应用实例内部的重复计算结果、不常变化的数据查询结果等，本地缓存能够提供极低的访问延迟，是提升单体应用或微服务实例性能的首选。</li></ul><p>在 Java 中，虽然可以手动实现缓存，但要考虑并发安全、淘汰策略、过期管理等复杂性。Guava Cache 和 Caffeine 提供了成熟、并发安全、功能丰富、高性能的本地缓存实现。</p><h3 id="guava-cache-核心特性回顾-简要" tabindex="-1"><a class="header-anchor" href="#guava-cache-核心特性回顾-简要"><span>Guava Cache 核心特性回顾 (简要)</span></a></h3><p>Guava Cache 是 Google Guava 库提供的一个本地缓存组件。它使用 Builder 模式构建缓存实例，提供了丰富的缓存功能。</p><ul><li><strong>Builder API (<code>CacheBuilder</code>)：</strong> 通过链式调用方法构建缓存实例。<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Cache</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CacheBuilder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> guavaCache <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// 最大缓存条目数</span>
    <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span> <span class="token comment">// 写入后10分钟过期</span>
    <span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开启统计</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>常用淘汰策略 (Eviction Policies)：</strong><ul><li>基于大小：<code>maximumSize(long)</code> (按条目数), <code>maximumWeight(long)</code> + <code>weigher(Weigher)</code> (按权重)。</li><li>基于时间：<code>expireAfterWrite(long, TimeUnit)</code> (写入后多久过期), <code>expireAfterAccess(long, TimeUnit)</code> (多久未被访问后过期)。</li><li>基于引用：<code>weakKeys()</code>, <code>weakValues()</code>, <code>softValues()</code> (利用 JVM 的弱引用/软引用进行回收)。</li></ul></li><li><strong>加载器 (CacheLoader)：</strong> <code>CacheLoader&lt;K, V&gt;</code> 接口，用于在缓存中不存在某个 Key 时，定义如何加载对应 Value 的逻辑。<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CacheLoader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">LoadingCache</span></span><span class="token punctuation">;</span>

<span class="token class-name">LoadingCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> loadingGuavaCache <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
            <span class="token comment">// 当缓存中没有 key 时，执行此方法加载数据</span>
            <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">&quot;_value&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>统计 (Statistics)：</strong> 通过 <code>recordStats()</code> 开启，提供命中率、加载次数、淘汰次数等统计信息。</li><li><strong>移除监听器 (RemovalListener)：</strong> 在缓存条目被移除时执行回调。</li></ul><h3 id="caffeine-cache-核心特性详解-重点" tabindex="-1"><a class="header-anchor" href="#caffeine-cache-核心特性详解-重点"><span>Caffeine Cache 核心特性详解 (重点)</span></a></h3><p>Caffeine 是一个高性能的 Java 缓存库，旨在成为 Guava Cache 的改进版本和替代品。它实现了与 Guava Cache 类似的 API，但底层实现进行了大量优化。</p><ul><li><strong>Builder API (<code>Caffeine</code>)：</strong> API 与 Guava Cache 的 <code>CacheBuilder</code> 非常相似，易于迁移。<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Cache</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Caffeine</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> caffeineCache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 使用 Caffeine.newBuilder()</span>
    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// API 几乎一样</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>常用淘汰策略：</strong> 支持基于大小、基于时间、基于引用的淘汰策略，与 Guava 类似。</li><li><strong>W-TinyLfu 算法 (优势简述)：</strong> <strong>这是 Caffeine 在淘汰算法上的一个重要创新。</strong> 它实现了 Window TinyLfu (W-TinyLfu) 淘汰算法，相较于 Guava Cache 使用的 LRU (Least Recently Used) 或其变种，W-TinyLfu 在缓存命中率方面通常表现更好，特别是在存在扫描访问模式（Scan Resistance）的场景下（例如，少量数据被频繁访问，同时大量数据被偶尔访问）。它通过一个小的“窗口”和 LFU (Least Frequently Used) 思想结合，更好地平衡了访问频率和访问时间。</li><li><strong>加载器 (CacheLoader)：</strong> 提供 <code>CacheLoader&lt;K, V&gt;</code> 接口，用于同步加载。</li><li><strong>异步加载器 (AsyncCacheLoader) 与 异步缓存 (AsyncCache) (重点)：</strong> <strong>这是 Caffeine 的一个关键特性改进。</strong><ul><li><strong><code>AsyncCacheLoader</code>：</strong> 用于异步加载数据，<code>load()</code> 方法返回 <code>CompletableFuture</code>。</li><li><strong><code>AsyncCache</code>：</strong> 一个支持异步存取值的缓存接口。<code>get(key, mappingFunction)</code> 方法返回 <code>CompletableFuture&lt;V&gt;</code>。即使缓存未命中，加载过程也是异步非阻塞的，不会阻塞调用线程。</li><li><strong>示例：</strong><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">AsyncCache</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">Caffeine</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>

<span class="token class-name">AsyncCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> asyncCaffeineCache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">buildAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 buildAsync() 构建异步缓存</span>

<span class="token comment">// 异步获取值</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureValue <span class="token operator">=</span> asyncCaffeineCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;myKey&quot;</span><span class="token punctuation">,</span> key <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果缓存未命中，异步执行加载逻辑</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Loading data for key: &quot;</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">&quot; asynchronously...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 模拟一个耗时的异步加载操作</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">&quot;_async_value&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 处理异步结果 (非阻塞)</span>
futureValue<span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Async value loaded/retrieved: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Async loading failed: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>作用：</strong> 避免缓存穿透导致大量请求阻塞在数据加载上，提高了系统的并发能力和响应性，特别适合在异步或响应式应用中使用。</li></ul></li><li><strong>移除监听器 (RemovalListener)：</strong> 在缓存条目被移除时执行回调，提供了移除原因 (RemovalCause)。</li><li><strong>统计 (Statistics)：</strong> 通过 <code>recordStats()</code> 开启，提供比 Guava 更丰富的统计信息。</li><li><strong>Spring Cache 集成：</strong> Caffeine 可以作为 Spring Caching Abstraction (<code>@Cacheable</code>, <code>@CachePut</code>, <code>@CacheEvict</code>) 的底层实现，提供高性能的本地缓存能力。</li></ul><h3 id="caffeine-cache-架构设计亮点-简要" tabindex="-1"><a class="header-anchor" href="#caffeine-cache-架构设计亮点-简要"><span>Caffeine Cache 架构设计亮点 (简要)</span></a></h3><ul><li><strong>W-TinyLfu 实现：</strong> Caffeine 的 W-TinyLfu 算法通过维护访问频率和访问时间的近似值，并结合分段窗口，能在复杂访问模式下更准确地识别真正的热点数据进行保留，从而提高缓存命中率。</li><li><strong>异步处理：</strong> Caffeine 的异步缓存和加载器设计，利用 <code>CompletableFuture</code> 等异步机制，将缓存的加载和写入操作转移到后台线程，避免阻塞调用线程。</li></ul><h3 id="caffeine-cache-使用方式详细-重点" tabindex="-1"><a class="header-anchor" href="#caffeine-cache-使用方式详细-重点"><span>Caffeine Cache 使用方式详细 (重点)</span></a></h3><h4 id="_4-1-添加依赖" tabindex="-1"><a class="header-anchor" href="#_4-1-添加依赖"><span>4.1 添加依赖</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.benmanes.caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>caffeine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-创建-cache-实例" tabindex="-1"><a class="header-anchor" href="#_4-2-创建-cache-实例"><span>4.2 创建 Cache 实例</span></a></h4><p>使用 <code>Caffeine.newBuilder()</code> 构建同步或异步缓存。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 同步缓存 - 基本使用</span>
<span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 最大条目数</span>
    <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span> <span class="token comment">// 写入后 5 分钟过期</span>
    <span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 记录统计信息</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 同步缓存 - 使用 CacheLoader</span>
<span class="token class-name">LoadingCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> loadingCache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expireAfterAccess</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span> <span class="token comment">// 10 分钟未访问过期</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 使用 Lambda 定义加载器</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Loading data for key: &quot;</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">&quot;_loaded_value&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 异步缓存 - 无加载器</span>
<span class="token class-name">AsyncCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> asyncCacheWithoutLoader <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">buildAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构建异步缓存</span>

<span class="token comment">// 异步缓存 - 使用 AsyncCacheLoader</span>
<span class="token class-name">AsyncCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> asyncCacheWithLoader <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">expireAfterWrite</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">buildAsync</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span>AsyncCacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>Executor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             <span class="token comment">// 使用提供的 executor 执行异步加载</span>
             <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;AsyncCacheLoader loading for key: &quot;</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">&quot;_async_loaded_value&quot;</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span><span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-存-取值" tabindex="-1"><a class="header-anchor" href="#_4-3-存-取值"><span>4.3 存/取值</span></a></h4><ul><li><strong><code>put(key, value)</code>：</strong> 存入值。</li><li><strong><code>getIfPresent(key)</code>：</strong> 如果缓存中存在该 Key，返回对应的值，否则返回 null。</li><li><strong><code>get(key, mappingFunction)</code> (同步缓存)：</strong> 如果缓存中存在该 Key，返回对应的值。否则，执行 <code>mappingFunction</code> 计算值，将计算结果放入缓存，并返回结果。</li><li><strong><code>get(key, loader)</code> (同步 <code>LoadingCache</code>)：</strong> 如果缓存中存在该 Key，返回对应的值。否则，调用 <code>loader</code> 的 <code>load</code> 方法加载数据，放入缓存，并返回结果。</li><li><strong><code>get(key, mappingFunction)</code> (异步缓存 <code>AsyncCache</code>)：</strong> 如果缓存中存在该 Key，返回 <code>CompletableFuture&lt;V&gt;</code>。如果缓存中<strong>不存在</strong>或已过期，执行 <code>mappingFunction</code> (返回 <code>CompletableFuture&lt;V&gt;</code>) 进行异步加载，加载过程中不阻塞调用线程，并将 <code>CompletableFuture</code> 放入缓存。</li><li><strong><code>get(key, asyncLoader)</code> (异步缓存 <code>AsyncCache</code> 使用 <code>AsyncCacheLoader</code>)：</strong> 类似，使用构建时指定的 <code>AsyncCacheLoader</code> 进行异步加载。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 同步缓存存取</span>
cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> value1 <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span><span class="token string">&quot;key1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取值</span>
<span class="token class-name">String</span> value2 <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key2&quot;</span><span class="token punctuation">,</span> k <span class="token operator">-&gt;</span> <span class="token string">&quot;value_from_mapping_&quot;</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓存中没有 key2 时计算并放入</span>
<span class="token class-name">String</span> value3 <span class="token operator">=</span> loadingCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓存中没有 key3 时调用 CacheLoader.load() 加载</span>

<span class="token comment">// 异步缓存存取</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureValue1 <span class="token operator">=</span> asyncCacheWithoutLoader<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;asyncKey1&quot;</span><span class="token punctuation">,</span> key <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
     <span class="token comment">// 异步计算逻辑，必须返回 CompletableFuture</span>
     <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> key <span class="token operator">+</span> <span class="token string">&quot;_computed_value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> futureValue2 <span class="token operator">=</span> asyncCacheWithLoader<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;asyncKey2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 AsyncCacheLoader 加载</span>

futureValue1<span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Got async value1: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
futureValue2<span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Got async value2: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-4-失效-invalidate" tabindex="-1"><a class="header-anchor" href="#_4-4-失效-invalidate"><span>4.4 失效 (Invalidate)</span></a></h4><ul><li><code>invalidate(key)</code>：失效单个 Key。</li><li><code>invalidateAll(keys)</code>：失效多个 Key。</li><li><code>invalidateAll()</code>：失效所有缓存条目。</li></ul><h4 id="_4-5-统计-statistics" tabindex="-1"><a class="header-anchor" href="#_4-5-统计-statistics"><span>4.5 统计 (Statistics)</span></a></h4><p>开启 <code>recordStats()</code> 后，可以通过 <code>cache.stats()</code> 获取统计信息。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>benmanes<span class="token punctuation">.</span>caffeine<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RemovalCause</span></span><span class="token punctuation">;</span>
<span class="token comment">// ... CacheBuilder code with recordStats()</span>

<span class="token class-name">Cache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token class-name">Caffeine</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">maximumSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">recordStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cache<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hit</span>
cache<span class="token punctuation">.</span><span class="token function">getIfPresent</span><span class="token punctuation">(</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Miss</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Stats: &quot;</span> <span class="token operator">+</span> cache<span class="token punctuation">.</span><span class="token function">stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Output will show hits, misses, load counts, eviction counts etc.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-6-使用-asynccache-代码示例" tabindex="-1"><a class="header-anchor" href="#_4-6-使用-asynccache-代码示例"><span>4.6 使用 AsyncCache (代码示例)</span></a></h4><p>异步缓存的核心在于 <code>buildAsync()</code> 和返回 <code>CompletableFuture</code> 的 <code>get</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 参见上面 AsyncCacheWithLoader 的构建和存取示例</span>
<span class="token comment">// 异步缓存的核心是将加载或计算逻辑包装在 CompletableFuture 中执行，</span>
<span class="token comment">// 调用方 get() 方法立即返回 CompletableFuture，避免阻塞。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="caffeine-cache-与-guava-cache-全方位对比分析-核心" tabindex="-1"><a class="header-anchor" href="#caffeine-cache-与-guava-cache-全方位对比分析-核心"><span>Caffeine Cache 与 Guava Cache 全方位对比分析 (核心！)</span></a></h3><p>Caffeine 被设计为 Guava Cache 的高性能替代品，它们在很多方面相似，但在关键的底层实现和一些特性上有所不同。</p><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">Guava Cache</th><th style="text-align:left;">Caffeine Cache</th><th style="text-align:left;">对比说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>性能</strong></td><td style="text-align:left;">良好，但在高并发或复杂访问模式下可能成为瓶颈</td><td style="text-align:left;"><strong>卓越</strong>，通常性能优于 Guava Cache</td><td style="text-align:left;">Caffeine 通过 W-TinyLfu 和底层优化减少锁竞争和 Cache Miss，吞吐和延迟更优。</td></tr><tr><td style="text-align:left;"><strong>淘汰算法</strong></td><td style="text-align:left;">基于 LRU 及其变种 (LRU-W)</td><td style="text-align:left;"><strong>W-TinyLfu</strong> (Window TinyLfu)</td><td style="text-align:left;">W-TinyLfu 在复杂访问模式下（如扫描访问）命中率通常比 LRU 更好。</td></tr><tr><td style="text-align:left;"><strong>异步缓存</strong></td><td style="text-align:left;">无原生异步缓存接口 (需自己包装 CompletableFuture)</td><td style="text-align:left;"><strong>原生支持 AsyncCache / AsyncCacheLoader</strong></td><td style="text-align:left;">Caffeine 提供了更便捷的异步加载和存取方式。</td></tr><tr><td style="text-align:left;"><strong>加载器</strong></td><td style="text-align:left;"><code>CacheLoader</code> (同步加载)</td><td style="text-align:left;"><code>CacheLoader</code> (同步), <code>AsyncCacheLoader</code> (异步)</td><td style="text-align:left;">Caffeine 增加了异步加载器，支持非阻塞加载。</td></tr><tr><td style="text-align:left;"><strong>移除原因</strong></td><td style="text-align:left;">提供 <code>RemovalCause</code></td><td style="text-align:left;">提供 <code>RemovalCause</code></td><td style="text-align:left;">相似。</td></tr><tr><td style="text-align:left;"><strong>维护状态</strong></td><td style="text-align:left;"><strong>维护模式</strong> (Maintenance mode)</td><td style="text-align:left;"><strong>积极开发和维护</strong></td><td style="text-align:left;">Guava Cache 不再积极开发新功能，Caffeine 是更活跃的选择。</td></tr><tr><td style="text-align:left;"><strong>Spring 集成</strong></td><td style="text-align:left;">支持</td><td style="text-align:left;"><strong>支持，Spring Boot 2+ 默认推荐</strong></td><td style="text-align:left;">两者都支持，但新项目和 Spring Boot 环境下 Caffeine 是首选。</td></tr><tr><td style="text-align:left;"><strong>API 相似度</strong></td><td style="text-align:left;"><strong>极高</strong> (Builder 模式和常用方法相似)</td><td style="text-align:left;"><strong>极高</strong></td><td style="text-align:left;">易于从 Guava Cache 迁移到 Caffeine。</td></tr><tr><td style="text-align:left;"><strong>底层实现</strong></td><td style="text-align:left;">基于 Segmented Concurrent Map，淘汰算法实现</td><td style="text-align:left;">基于 Concurrent Map，W-TinyLfu 淘汰算法</td><td style="text-align:left;">Caffeine 的底层实现更复杂，但性能优化更好。</td></tr><tr><td style="text-align:left;"><strong>概念复杂性</strong></td><td style="text-align:left;">相对简单</td><td style="text-align:left;">稍复杂 (W-TinyLfu, Async Cache)</td><td style="text-align:left;">Caffeine 引入了一些新概念，但整体学习曲线不陡峭。</td></tr></tbody></table><h3 id="优缺点总结与选型建议" tabindex="-1"><a class="header-anchor" href="#优缺点总结与选型建议"><span>优缺点总结与选型建议</span></a></h3><ul><li><strong>Caffeine Cache</strong><ul><li><strong>优点：</strong> 性能卓越，支持异步缓存和异步加载，淘汰算法更优，社区活跃，官方推荐。</li><li><strong>缺点：</strong> 相较于 Guava Cache，引入时间较短，可能不如 Guava Cache 那么普及（但已是主流）。</li></ul></li><li><strong>Guava Cache</strong><ul><li><strong>优点：</strong> 成熟稳定，代码久经考验，API 易于理解，社区资料丰富。</li><li><strong>缺点：</strong> 性能不如 Caffeine，不支持原生异步缓存，淘汰算法相对简单，已进入维护模式。</li></ul></li></ul><p><strong>选型建议：</strong></p><ul><li><strong>新项目：</strong> <strong>强烈推荐使用 Caffeine Cache。</strong> 它提供了更好的性能和更现代化的特性，是官方推荐的本地缓存库。</li><li><strong>遗留项目：</strong> 如果项目中已经使用了 Guava Cache 且性能满足要求，可以继续使用。但如果遇到性能瓶颈或希望升级技术栈，<strong>迁移到 Caffeine 是一个不错的选择</strong>，由于 API 高度相似，迁移成本相对较低。</li></ul><h3 id="理解-caffeine-guava-cache-对开发者和面试的价值" tabindex="-1"><a class="header-anchor" href="#理解-caffeine-guava-cache-对开发者和面试的价值"><span>理解 Caffeine/Guava Cache 对开发者和面试的价值</span></a></h3><ul><li><strong>掌握本地缓存原理：</strong> 理解缓存的必要性、淘汰策略、加载机制等核心概念。</li><li><strong>理解高性能实现：</strong> 学习 Caffeine 如何通过 W-TinyLfu、无锁、异步等手段实现高性能。</li><li><strong>具备对比分析能力：</strong> 能够清晰地对比不同库的优劣，并根据场景做出技术选型。</li><li><strong>解决实际性能问题：</strong> 学会使用本地缓存优化应用性能。</li><li><strong>应对面试：</strong> 本地缓存是 Java 开发的常用技术，Guava 和 Caffeine 的对比是面试常考点。</li></ul><h3 id="caffeine-guava-cache-为何是面试热点" tabindex="-1"><a class="header-anchor" href="#caffeine-guava-cache-为何是面试热点"><span>Caffeine/Guava Cache 为何是面试热点</span></a></h3><ul><li><strong>基础缓存知识：</strong> 考察你对缓存概念、淘汰策略、加载机制的理解。</li><li><strong>常用库实践：</strong> 考察你是否了解并使用过业界常用的本地缓存库。</li><li><strong>性能优化意识：</strong> 考察你是否具备性能优化意识，并知道如何使用工具进行优化。</li><li><strong>技术选型与对比：</strong> Caffeine vs Guava 是经典的对比题，考察你分析和评估技术方案的能力。</li><li><strong>新旧技术演进：</strong> Caffeine 作为 Guava Cache 的继任者，体现了技术的发展。</li></ul><h3 id="面试问题示例与深度解析" tabindex="-1"><a class="header-anchor" href="#面试问题示例与深度解析"><span>面试问题示例与深度解析</span></a></h3><ul><li><strong>什么是本地缓存？为什么需要在应用中使用本地缓存？</strong> (定义，解决 JDBC/远程调用慢，提升性能/响应)</li><li><strong>请介绍一下 Guava Cache 的核心特性。</strong> (Builder API, 淘汰策略, 加载器, 统计)</li><li><strong>请介绍一下 Caffeine Cache 的核心特性。它相较于 Guava Cache 有哪些优势？</strong> (<strong>核心！</strong> 必考题。Builder API, 淘汰策略, W-TinyLfu 优势，加载器, <strong>AsyncCache/AsyncCacheLoader 优势</strong>，统计，移除监听器。优势：性能、Async、W-TinyLfu、活跃维护)</li><li><strong>请解释一下 Guava Cache 和 Caffeine Cache 中常用的淘汰策略。它们有什么区别？</strong> (大小、时间、引用。区别：Guava LRU变种 vs Caffeine W-TinyLfu)</li><li><strong>Caffeine 的 W-TinyLfu 淘汰算法相较于 LRU 有什么优势？</strong> (<strong>核心！</strong> 优势：在扫描访问模式下命中率更高，更好地平衡频率和时间)</li><li><strong>请解释一下 Caffeine 的 AsyncCache 和 AsyncCacheLoader。它们解决了什么问题？适用于什么场景？</strong> (<strong>核心！</strong> 解决问题：缓存穿透导致同步加载阻塞调用线程。AsyncCacheLoader 异步加载，AsyncCache 支持异步存取。适用于异步/响应式应用)</li><li><strong>如何在 Java 中使用 Caffeine Cache？请给出创建 Cache 实例的示例代码。</strong> (回答 Builder API <code>Caffeine.newBuilder()...build()</code>)</li><li><strong>如何在 Spring Boot 中集成 Caffeine Cache？</strong> (引入 <code>spring-boot-starter-cache</code>，通常 Spring Boot 会自动检测并配置 Caffeine)</li><li><strong>请对比一下 Caffeine Cache 和 Guava Cache。你会在什么情况下选择 Caffeine？什么情况下选择 Guava？</strong> (<strong>核心！</strong> 必考题。从性能、淘汰算法、异步支持、维护状态、Spring 集成等方面对比，给出选型建议：新项目/性能要求高选 Caffeine，遗留系统或无性能瓶颈可继续用 Guava，但推荐迁移)</li><li><strong>本地缓存的数据一致性问题如何考虑？</strong> (本地缓存通常是最终一致的，需要考虑缓存更新、失效、穿透等问题，与分布式缓存的数据一致性方案不同)</li><li><strong>Publisher Confirms 和 Consumer Acknowledgements</strong></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>本地缓存是优化应用性能的有效手段，Guava Cache 和 Caffeine 是 Java 领域最常用的两个本地缓存库。Guava Cache 经典易用，而 Caffeine Cache 作为其继任者，在性能和异步特性方面进行了显著提升，特别是其 W-TinyLfu 淘汰算法和 AsyncCache/AsyncCacheLoader，使其成为构建高性能应用的更优选择，并已成为现代 Spring Boot 的默认推荐。</p>`,49)]))}const u=a(p,[["render",c],["__file","caffeine.html.vue"]]),r=JSON.parse('{"path":"/tool/caffeine.html","title":"","lang":"zh-CN","frontmatter":{"description":"在 Java 领域，Google Guava 库中的 Cache 模块曾经是本地缓存的事实标准，被广泛应用。然而，随着时间的推移，特别是在对性能要求更高的场景下，另一个优秀的本地缓存库 Caffeine 崭露头角，并被证明在性能上优于 Guava Cache，甚至在 Spring 5 及 Spring Boot 2 以后成为了默认推荐的缓存实现。 理解...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/tool/caffeine.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"在 Java 领域，Google Guava 库中的 Cache 模块曾经是本地缓存的事实标准，被广泛应用。然而，随着时间的推移，特别是在对性能要求更高的场景下，另一个优秀的本地缓存库 Caffeine 崭露头角，并被证明在性能上优于 Guava Cache，甚至在 Spring 5 及 Spring Boot 2 以后成为了默认推荐的缓存实现。 理解..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-02T13:32:39.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-02T13:32:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-02T13:32:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Caffeine Cache 深度解析与 Guava Cache 对比：本地缓存选型指南","slug":"caffeine-cache-深度解析与-guava-cache-对比-本地缓存选型指南","link":"#caffeine-cache-深度解析与-guava-cache-对比-本地缓存选型指南","children":[{"level":3,"title":"引言：缓存是优化性能的利器","slug":"引言-缓存是优化性能的利器","link":"#引言-缓存是优化性能的利器","children":[]},{"level":3,"title":"Guava Cache 核心特性回顾 (简要)","slug":"guava-cache-核心特性回顾-简要","link":"#guava-cache-核心特性回顾-简要","children":[]},{"level":3,"title":"Caffeine Cache 核心特性详解 (重点)","slug":"caffeine-cache-核心特性详解-重点","link":"#caffeine-cache-核心特性详解-重点","children":[]},{"level":3,"title":"Caffeine Cache 架构设计亮点 (简要)","slug":"caffeine-cache-架构设计亮点-简要","link":"#caffeine-cache-架构设计亮点-简要","children":[]},{"level":3,"title":"Caffeine Cache 使用方式详细 (重点)","slug":"caffeine-cache-使用方式详细-重点","link":"#caffeine-cache-使用方式详细-重点","children":[]},{"level":3,"title":"Caffeine Cache 与 Guava Cache 全方位对比分析 (核心！)","slug":"caffeine-cache-与-guava-cache-全方位对比分析-核心","link":"#caffeine-cache-与-guava-cache-全方位对比分析-核心","children":[]},{"level":3,"title":"优缺点总结与选型建议","slug":"优缺点总结与选型建议","link":"#优缺点总结与选型建议","children":[]},{"level":3,"title":"理解 Caffeine/Guava Cache 对开发者和面试的价值","slug":"理解-caffeine-guava-cache-对开发者和面试的价值","link":"#理解-caffeine-guava-cache-对开发者和面试的价值","children":[]},{"level":3,"title":"Caffeine/Guava Cache 为何是面试热点","slug":"caffeine-guava-cache-为何是面试热点","link":"#caffeine-guava-cache-为何是面试热点","children":[]},{"level":3,"title":"面试问题示例与深度解析","slug":"面试问题示例与深度解析","link":"#面试问题示例与深度解析","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1746192759000,"updatedTime":1746192759000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":12.67,"words":3802},"filePathRelative":"tool/caffeine.md","localizedDate":"2025年5月2日","autoDesc":true}');export{u as comp,r as data};

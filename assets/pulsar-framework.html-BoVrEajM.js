import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a as o,o as l}from"./app-17qzZVk7.js";const s={};function n(g,t){return l(),e("div",null,t[0]||(t[0]=[o('<p>在分布式消息和流处理领域，Apache Kafka 和 RabbitMQ 是两个非常重要的平台。然而，随着云原生和大规模分布式应用的兴起，它们在架构上的某些限制也逐渐显现，特别是在<strong>存储层和Serving层紧密耦合</strong>方面。例如，Kafka 的 Broker 既负责处理客户端请求，也负责消息的物理存储，这使得在需要弹性伸缩（只扩展处理能力不扩展存储，或反之）、复杂的存储管理（如分层存储）或快速故障恢复时，面临一定的挑战。</p><p>Apache Pulsar 正是为了解决这些在云原生时代对传统消息队列提出的新挑战而设计的<strong>分布式消息和流处理平台</strong>。它以其独特的分层架构（Serving 层和 Storage 层分离）和灵活的订阅模型而备受关注。理解 Pulsar 的架构设计、核心概念及其工作原理，是掌握云原生消息技术栈、进行技术选型以及应对面试官考察的关键。</p><p>今天，就让我们深度剖析 Pulsar，看看这个云原生消息平台是如何构建的。</p><hr><h2 id="深度解析-apache-pulsar-架构设计-存储与计算分离的云原生消息平台" tabindex="-1"><a class="header-anchor" href="#深度解析-apache-pulsar-架构设计-存储与计算分离的云原生消息平台"><span>深度解析 Apache Pulsar 架构设计：存储与计算分离的云原生消息平台</span></a></h2><h3 id="引言-消息队列的演进与-pulsar-的新范式" tabindex="-1"><a class="header-anchor" href="#引言-消息队列的演进与-pulsar-的新范式"><span>引言：消息队列的演进与 Pulsar 的新范式</span></a></h3><p>传统的基于队列的消息中间件（如 RabbitMQ）和分布式日志系统（如 Kafka）在分布式系统中发挥着重要作用。然而，随着云原生和容器化技术的普及，它们在架构上的某些限制逐渐成为瓶颈：</p><ul><li><strong>存储与 Serving 耦合：</strong> Broker 节点通常同时承担处理客户端请求（Serving）和持久化存储数据（Storage）的任务。这导致： <ul><li><strong>弹性伸缩困难：</strong> 往往需要同时扩展计算和存储，即使只需要其中一项的资源。</li><li><strong>数据重平衡复杂：</strong> 节点扩缩容或故障时，数据需要重新在节点间移动，过程复杂且影响性能。</li><li><strong>分层存储不易：</strong> 将历史数据迁移到成本更低的存储介质（如对象存储）需要在 Broker 层面进行复杂管理。</li></ul></li><li><strong>订阅模型不够灵活：</strong> 一些平台提供的订阅模式可能无法完全满足复杂多变的消费需求。</li></ul><p>Pulsar 正是在深刻洞察这些痛点后，提出了<strong>存储与计算分离 (Storage-Compute Separation)</strong> 的创新架构，旨在提供一个更适合云原生环境的、更具操作弹性的消息和流处理平台。</p><h3 id="pulsar-是什么-定位与核心理念" tabindex="-1"><a class="header-anchor" href="#pulsar-是什么-定位与核心理念"><span>Pulsar 是什么？定位与核心理念</span></a></h3><p>Apache Pulsar 是一个<strong>分布式、云原生、高可用、多租户的消息和流处理平台</strong>。</p><ul><li><strong>定位：</strong> 它是一个下一代消息中间件，旨在<strong>统一消息队列和流处理</strong>，并为云环境提供更强的弹性伸缩和运维能力。</li><li><strong>核心理念：</strong> 将消息的<strong>Serving（处理客户端请求）层</strong>与<strong>Storage（持久化存储）层</strong>彻底分离，使它们可以独立伸缩和管理。</li></ul><h3 id="为什么选择-pulsar-优势分析" tabindex="-1"><a class="header-anchor" href="#为什么选择-pulsar-优势分析"><span>为什么选择 Pulsar？优势分析</span></a></h3><ul><li><strong>独特的架构优势 (存储与计算分离)：</strong> 这是 Pulsar 最核心的优势。 <ul><li><strong>独立的弹性伸缩：</strong> 可以根据吞吐量需求独立扩展 Broker 节点（计算），或根据数据量需求独立扩展 Bookie 节点（存储）。</li><li><strong>操作弹性高：</strong> Broker 无状态，故障恢复快，扩缩容无需数据重平衡。</li><li><strong>数据重平衡简单：</strong> BookKeeper 的存储特性使得数据分布更均匀，且不绑定到特定的 Broker。</li><li><strong>天然支持分层存储 (Tiered Storage)：</strong> 易于将旧数据无缝迁移到对象存储等冷存储介质。</li></ul></li><li><strong>丰富的订阅模式：</strong> 提供多种灵活的订阅类型，满足不同消费场景的需求。</li><li><strong>内置地理复制 (Geo-Replication)：</strong> 支持在多个数据中心之间复制数据，构建灾备和多活系统。</li><li><strong>统一消息和流 API：</strong> 生产者发送消息，消费者以多种方式消费，API 统一。</li><li><strong>高可靠和持久性：</strong> 基于 BookKeeper 的复制机制保证数据不丢失。</li><li><strong>多租户：</strong> 内置多租户管理能力。</li></ul><h3 id="pulsar-架构设计与核心组件-重点" tabindex="-1"><a class="header-anchor" href="#pulsar-架构设计与核心组件-重点"><span>Pulsar 架构设计与核心组件 (重点)</span></a></h3><p>Pulsar 的架构是其最显著的特点，分为Serving层、Storage层和Metadata层。</p><ol><li><p><strong>角色：</strong></p><ul><li><strong>Producer：</strong> 消息生产者，发送消息到 Broker。</li><li><strong>Consumer：</strong> 消息消费者，从 Broker 接收并消费消息。</li><li><strong>Broker：</strong> <strong>Serving 层</strong>，<strong>无状态</strong>。负责处理生产者和消费者的请求（消息的收发），运行消息的查找和服务逻辑，不负责消息的物理存储。Broker 集群是无状态的，可以快速扩缩容和恢复。</li><li><strong>BookKeeper (包含 Bookie 节点)：</strong> <strong>Storage 层</strong>，<strong>有状态</strong>。一个 Apache 开源的<strong>分布式日志存储系统</strong>。Bookie 是 BookKeeper 集群中的存储节点。BookKeeper 负责消息的持久化存储、复制和读取。它是 Pulsar 数据可靠性和持久性的基石。</li><li><strong>Zookeeper：</strong> <strong>Metadata 层</strong>，有状态。负责存储 Pulsar 和 BookKeeper 的元数据，如 Broker 信息、Topic 配置、Ledger 信息、消费者订阅的 Offset (Cursor) 等。用于集群协调和 Leader 选举。</li></ul></li><li><p><strong>分层架构：</strong></p><ul><li><strong>Serving Layer (Brokers)：</strong> 接收客户端连接和请求，并将消息写入 Storage 层，从 Storage 层读取消息投递给客户端。由于不存储消息本身，Broker 是无状态的，易于横向扩展和快速恢复。</li><li><strong>Storage Layer (Bookies)：</strong> 由 BookKeeper 集群提供，负责消息的持久化存储。消息被写入 BookKeeper 的 <strong>Ledger</strong> 中。BookKeeper 保证写入的消息是持久化和复制的。Storage 层是有状态的。</li><li><strong>WHY 分层？带来的优势：</strong><ul><li><strong>独立伸缩：</strong> 根据吞吐量需求独立增减 Broker 节点；根据数据量需求独立增减 Bookie 节点。</li><li><strong>操作弹性：</strong> Broker 宕机或重启不丢失状态，不影响数据，恢复快。</li><li><strong>数据重平衡简化：</strong> 数据分布在 BookKeeper 集群中，与 Broker 无关，Broker 扩缩容不涉及数据迁移。BookKeeper 内部的数据分布管理更高效。</li><li><strong>支持分层存储：</strong> 旧的 Ledger 可以无缝地从 BookKeeper 迁移到对象存储等冷存储系统，降低存储成本。</li></ul></li></ul></li><li><p><strong>存储单元：</strong></p><ul><li><strong>Ledger (账本)：</strong> Apache BookKeeper 中的核心概念。一个 Ledger 是一个只支持<strong>追加写 (Append-only)</strong> 的、<strong>有序的 Entry 序列</strong>。Ledger 创建后<strong>不可变</strong>。一个 Topic 的一个 Partition 的数据会跨越多个 Ledger 进行存储。</li><li><strong>Entry (条目)：</strong> 写入 Ledger 的基本单元。通常包含一条或多条消息的 Batch。</li><li><strong>Cursor (游标)：</strong> 存储在 BookKeeper 中的数据结构，用于持久化跟踪<strong>一个订阅 (Subscription)</strong> 在一个 <strong>Partition</strong> 中的消费进度（Offset）。</li></ul></li><li><p><strong>订阅 (Subscription) - 关键概念：</strong></p><ul><li><strong>定义：</strong> 表示一个消费者组消费一个 Topic 的特定方式。订阅是持久化的命名实体。</li><li><strong>作用：</strong> 控制消息如何从 Topic 的 Partitions 分配给消费组中的消费者实例，以及消费者如何追踪和确认消费进度。</li><li><strong>详解四种类型，对比适用场景：</strong> 这是 Pulsar 相较于 Kafka/RabbitMQ 的一个显著优势。 <ul><li><strong>Exclusive (独占订阅)：</strong> 一个订阅只允许一个消费者实例连接。所有消息都投递给这一个消费者。如果该消费者断开，其他等待中的消费者会接管。<strong>场景：</strong> 需要严格的顺序处理，或者只需要一个消费者实例。</li><li><strong>Shared (共享订阅)：</strong> 允许多个消费者实例连接到同一个订阅。消息会<strong>轮询分发</strong>给订阅下的不同消费者实例，实现负载均衡。消息在被任一消费者确认后即从订阅中移除。支持<strong>自动扩展</strong>消费能力（增加消费者实例）。<strong>场景：</strong> 大部分通用消费场景，需要并行处理和自动负载均衡。</li><li><strong>Failover (失效转移订阅)：</strong> 允许多个消费者实例连接到同一个订阅。但所有消息<strong>只投递给其中一个“主”消费者</strong>。其他消费者处于备用状态。当主消费者断开时，其中一个备用消费者会被提升为新的主消费者继续消费。<strong>场景：</strong> 需要主备模式，强调高可用而非并行处理。</li><li><strong>Key_Shared (键共享订阅)：</strong> 允许多个消费者实例连接到同一个订阅。消息会根据<strong>消息的 Key 进行哈希</strong>，具有相同 Key 的消息总是被投递给同一个消费者实例。实现<strong>基于 Key 的局部顺序</strong>和<strong>并行处理</strong>。<strong>场景：</strong> 需要保证相同 Key 的消息顺序处理，但不同 Key 的消息可以并行处理。</li></ul></li></ul></li></ol><h3 id="pulsar-工作流程-publish-consume-详细" tabindex="-1"><a class="header-anchor" href="#pulsar-工作流程-publish-consume-详细"><span>Pulsar 工作流程 (Publish/Consume 详细)</span></a></h3><ol><li><p><strong>发布流程：</strong></p><ul><li>Producer 连接到 Broker。</li><li>Producer 发送消息到 Topic 的一个 Partition (如果 Partitioned Topic)。</li><li>Broker 接收消息，选择一个当前开放的 Ledger。</li><li>Broker 将消息作为 Entry <strong>写入到 BookKeeper 的 Ledger</strong> 中。</li><li>BookKeeper 在其集群内部进行<strong>复制</strong>（Journaling 和 EntryLog 写磁盘，并复制到其他 Bookie）。</li><li>BookKeeper 确认 Entry 写入和复制成功后，向 Broker 返回确认。</li><li>Broker 向 Producer 返回发送成功确认。</li></ul></li><li><p><strong>消费流程：</strong></p><ul><li>Consumer 连接到 Broker，订阅 Topic 的一个 Partition (基于 Subscription)。</li><li>Broker 根据 Subscription 的 <strong>Cursor</strong> (记录了该订阅在 Partition 中的消费进度) 从 BookKeeper 的 Ledger 中<strong>读取</strong> Entry (消息)。</li><li>Broker 将 Entry 包含的消息<strong>投递</strong>给 Consumer (根据 Subscription 类型和消费者状态)。</li><li>Consumer 处理消息，然后向 Broker 发送<strong>确认 (Ack)</strong>。</li><li>Broker 接收 Consumer 的 Ack 后，更新该 Subscription 在 BookKeeper 中的 <strong>Cursor</strong> 位置，标记消息已消费。</li></ul></li></ol><p><strong>流程图示 (文字版):</strong></p><p><strong>发布:</strong> Producer -&gt; Broker (Serving) -&gt; Write Entry -&gt; BookKeeper (Storage) -&gt; BookKeeper Ack -&gt; Broker -&gt; Producer Ack</p><p><strong>消费:</strong> Consumer -&gt; Broker (Serving) -&gt; Broker Read Entries (from Ledger) -&gt; BookKeeper (Storage) -&gt; Broker -&gt; Deliver Message -&gt; Consumer 处理 -&gt; Consumer Ack -&gt; Broker -&gt; Update Cursor -&gt; BookKeeper (Storage)</p><h3 id="高可用与数据一致性" tabindex="-1"><a class="header-anchor" href="#高可用与数据一致性"><span>高可用与数据一致性</span></a></h3><ul><li><strong>Broker 高可用：</strong> Broker 是无状态的。任何一个 Broker 宕机不会导致数据丢失。新的连接可以建立到其他 Broker，现有的连接会自动迁移（通常通过客户端重连和负载均衡）。</li><li><strong>BookKeeper 高可用与数据持久性：</strong> BookKeeper 集群使用 Paxos 或 Raft 协议的变体来保证 Ledger 的写入是持久和一致的，并通过配置 Entry 的<strong>复制因子 (Replication Factor)</strong> 和<strong>写入法定人数 (Write Quorum)</strong> 来保证即使部分 Bookie 节点宕机，数据也不会丢失且可写。Ledger 一旦封闭则不可变，进一步保证数据可靠。</li><li><strong>Metadata 高可用：</strong> Zookeeper 集群保证 Pulsar 和 BookKeeper 元数据的高可用。</li><li><strong>数据一致性：</strong> BookKeeper 保证对 Ledger 的写入是强一致和有序的。Cursor 的更新也是持久化在 BookKeeper 中，保证消费进度的不丢失和一致性。</li></ul><h3 id="pulsar-关键特性回顾" tabindex="-1"><a class="header-anchor" href="#pulsar-关键特性回顾"><span>Pulsar 关键特性回顾</span></a></h3><ul><li><strong>分层架构 (Serving/Storage Separation)：</strong> 核心优势，提供独立伸缩和操作弹性。</li><li><strong>多种订阅模式 (Exclusive, Shared, Failover, Key_Shared)：</strong> 灵活的消费方式。</li><li><strong>地理复制 (Geo-Replication)：</strong> 内置支持跨数据中心的异步复制。</li><li><strong>分层存储 (Tiered Storage)：</strong> 将旧数据透明迁移到 S3 等对象存储。</li><li><strong>Pulsar Functions：</strong> 轻量级无服务计算框架，无需独立部署流处理引擎即可处理消息。</li><li><strong>Pulsar IO：</strong> 连接器框架，方便 Pulsar 与其他系统集成。</li></ul><h3 id="常见应用场景" tabindex="-1"><a class="header-anchor" href="#常见应用场景"><span>常见应用场景</span></a></h3><ul><li>云原生消息队列，特别是在 Kubernetes 环境下。</li><li>需要应对高弹性伸缩和频繁扩缩容的场景。</li><li>需要处理大量历史数据并支持回溯消费的场景。</li><li>需要多种复杂消费模式（如 Key 顺序共享消费）的场景。</li><li>需要内置地理复制或分层存储的场景。</li><li>统一消息和流处理的平台。</li></ul><h3 id="pulsar-vs-kafka-vs-rabbitmq-对比分析-重点" tabindex="-1"><a class="header-anchor" href="#pulsar-vs-kafka-vs-rabbitmq-对比分析-重点"><span>Pulsar vs Kafka vs RabbitMQ 对比分析 (重点)</span></a></h3><p>Pulsar 在设计上吸取了 Kafka 和 RabbitMQ 的优点，并引入了 Storage/Serving 分离等创新，形成了独特的定位。</p><table><thead><tr><th style="text-align:left;">特性</th><th style="text-align:left;">Apache Pulsar</th><th style="text-align:left;">Apache Kafka</th><th style="text-align:left;">RabbitMQ</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>核心模型</strong></td><td style="text-align:left;"><strong>分布式消息/流平台</strong> (分层)</td><td style="text-align:left;"><strong>分布式提交日志/流平台</strong> (单层)</td><td style="text-align:left;"><strong>传统消息队列</strong> (Broker 集群, 灵活路由)</td></tr><tr><td style="text-align:left;"><strong>架构</strong></td><td style="text-align:left;"><strong>NameServer + Brokers (无状态)</strong> + <strong>Bookies (有状态)</strong></td><td style="text-align:left;">Zookeeper/Kraft + Broker (Leader/Follower)</td><td style="text-align:left;">Broker 集群 (节点对等或镜像)</td></tr><tr><td style="text-align:left;"><strong>存储</strong></td><td style="text-align:left;"><strong>分层存储</strong> (BookKeeper Ledger), <strong>基于文件系统</strong></td><td style="text-align:left;"><strong>分布式日志</strong> (Partition Logs), 文件系统顺序写</td><td style="text-align:left;"><strong>基于内存和磁盘队列</strong></td></tr><tr><td style="text-align:left;"><strong>协议</strong></td><td style="text-align:left;"><strong>自定义协议</strong>，支持 OpenMessaging, MQTT, AMQP</td><td style="text-align:left;"><strong>自定义协议</strong>，支持 Kafka 协议</td><td style="text-align:left;"><strong>AMQP (核心)</strong>, MQTT, STOMP</td></tr><tr><td style="text-align:left;"><strong>消费模型</strong></td><td style="text-align:left;"><strong>Push 和 Pull 都支持</strong>, <strong>四种订阅类型</strong></td><td style="text-align:left;"><strong>Pull (拉模式)</strong></td><td style="text-align:left;"><strong>Push (推荐)</strong> 和 Pull 都支持</td></tr><tr><td style="text-align:left;"><strong>消息顺序</strong></td><td style="text-align:left;"><strong>局部顺序</strong> (Queue 内)，支持 <strong>Key_Shared</strong></td><td style="text-align:left;"><strong>分区内顺序</strong> (Partition 内) 保证</td><td style="text-align:left;">通常队列内有序，发布订阅无序或依赖配置</td></tr><tr><td style="text-align:left;"><strong>事务消息</strong></td><td style="text-align:left;">不直接内置 (需外部框架或将来支持)</td><td style="text-align:left;">支持事务 (Producer Transaction)，需额外集成分布式</td><td style="text-align:left;">支持事务 (AMQP Transaction)，但不是分布式事务消息</td></tr><tr><td style="text-align:left;"><strong>定时/延时消息</strong></td><td style="text-align:left;"><strong>内置支持</strong></td><td style="text-align:left;">不直接支持 (需外部调度)</td><td style="text-align:left;">不直接支持 (需插件或外部调度)</td></tr><tr><td style="text-align:left;"><strong>消息过滤</strong></td><td style="text-align:left;">Broker 端 (Tag/SQL) 和 消费者端</td><td style="text-align:left;">消费者端过滤 (版本更高)</td><td style="text-align:left;">Broker 端 (Routing Key, Header), 消费者端</td></tr><tr><td style="text-align:left;"><strong>管理界面</strong></td><td style="text-align:left;">友好，云原生特性支持</td><td style="text-align:left;">功能较基础 (需第三方工具)</td><td style="text-align:left;">功能强大</td></tr><tr><td style="text-align:left;"><strong>一致性</strong></td><td style="text-align:left;"><strong>通常配置为 CP</strong> (写入 BookKeeper)</td><td style="text-align:left;"><strong>分区内强一致，分区间最终一致</strong> (ISR)</td><td style="text-align:left;">依赖配置</td></tr><tr><td style="text-align:left;"><strong>CAP 倾向</strong></td><td style="text-align:left;"><strong>存储 CP (BookKeeper)</strong>, <strong>服务发现 AP</strong> (Distro), 整体倾向依赖配置</td><td style="text-align:left;"><strong>通常配置为 AP</strong></td><td style="text-align:left;">依赖配置</td></tr><tr><td style="text-align:left;"><strong>易用性</strong></td><td style="text-align:left;">概念相对复杂 (Ledger, BookKeeper)</td><td style="text-align:left;">相对简单，概念清晰</td><td style="text-align:left;">概念经典，易于上手</td></tr><tr><td style="text-align:left;"><strong>运维弹性</strong></td><td style="text-align:left;"><strong>高</strong> (存储计算分离)</td><td style="text-align:left;">相对较低 (耦合)</td><td style="text-align:left;">适中</td></tr><tr><td style="text-align:left;"><strong>Geo-Replication</strong></td><td style="text-align:left;"><strong>内置支持</strong></td><td style="text-align:left;">需额外工具或方案</td><td style="text-align:left;">需额外工具或方案</td></tr></tbody></table><ul><li><strong>简单总结：</strong><ul><li><strong>Kafka：</strong> 高吞吐的数据管道，适合大数据和流处理。</li><li><strong>RabbitMQ：</strong> 灵活的信使，适合传统消息队列和复杂路由。</li><li><strong>Pulsar：</strong> 云原生的消息和流平台，适合需要弹性伸缩、多种订阅模式和存储计算分离的场景。</li></ul></li></ul><h3 id="理解-pulsar-架构与使用方式的价值" tabindex="-1"><a class="header-anchor" href="#理解-pulsar-架构与使用方式的价值"><span>理解 Pulsar 架构与使用方式的价值</span></a></h3><ul><li><strong>掌握云原生消息原理：</strong> 理解存储计算分离带来的架构优势。</li><li><strong>理解分布式存储 (BookKeeper)：</strong> 学习 Ledger 等概念。</li><li><strong>理解多样化订阅模型：</strong> 知道如何根据不同场景选择最合适的消费方式。</li><li><strong>对比分析能力：</strong> 能够清晰地对比 Pulsar、Kafka、RabbitMQ 的差异，做出合理的选型决策。</li><li><strong>应对面试：</strong> Pulsar 是新兴的热点，其独特架构和特性是高频考点。</li></ul><h3 id="pulsar-为何是面试热点" tabindex="-1"><a class="header-anchor" href="#pulsar-为何是面试热点"><span>Pulsar 为何是面试热点</span></a></h3><ul><li><strong>云原生背景：</strong> 是针对云环境设计的新一代消息系统。</li><li><strong>架构独特：</strong> 存储与计算分离是其最核心的差异点，易于考察原理。</li><li><strong>对比对象：</strong> 常与 Kafka/RabbitMQ 进行对比，考察你对不同消息系统理解深度。</li><li><strong>多种订阅模式：</strong> 是区别于 Kafka 的重要功能，常考。</li><li><strong>未来趋势：</strong> 代表了消息系统在云原生时代的一个发展方向。</li></ul><h3 id="面试问题示例与深度解析" tabindex="-1"><a class="header-anchor" href="#面试问题示例与深度解析"><span>面试问题示例与深度解析</span></a></h3><ul><li><strong>什么是 Apache Pulsar？它解决了传统消息队列（如 Kafka/RabbitMQ）在架构上的哪些问题？核心理念是什么？</strong> (定义分布式消息/流平台，解决存储与计算耦合问题，核心理念是存储与计算分离的云原生平台)</li><li><strong>请描述一下 Pulsar 的整体架构。它包含哪些核心组件？它们之间如何协同工作？</strong> (<strong>核心！</strong> 必考题。回答：NameServer, Brokers (Serving), Bookies (Storage), Zookeeper (Metadata)。描述分层架构，Broker 与 BookKeeper 如何交互)</li><li><strong>请详细解释 Pulsar 的分层架构。Serving 层和 Storage 层分别是什么？为什么将它们分离？这样做有什么优势？</strong> (<strong>核心！</strong> 必考题。Serving=Brokers (无状态)，Storage=BookKeeper (有状态)。为什么分离：独立伸缩、操作弹性、数据重平衡简化、分层存储支持。优势：弹性高、运维成本低)</li><li><strong>请介绍一下 Pulsar 的存储层 BookKeeper。它的核心概念是什么？数据是如何存储和复制的？</strong> (<strong>核心！</strong> BookKeeper 定义，核心概念：Ledger (只追加、不可变、有序条目序列), Entry (消息单元), Bookie (存储节点)。数据存 Ledger，复制到 Bookie，保证持久和高可用)</li><li><strong>请解释一下 Pulsar 的四种订阅 (Subscription) 类型：Exclusive, Shared, Failover, Key_Shared。它们分别有什么特点和适用场景？</strong> (<strong>核心！</strong> 必考题，详细解释每种类型如何分配分区给消费者实例，以及消息投递和确认规则，对比场景)</li><li><strong>请描述一个消息在 Pulsar 中的发布流程。</strong> (Producer -&gt; Broker -&gt; Write Entry -&gt; BookKeeper -&gt; BookKeeper Ack -&gt; Broker -&gt; Producer Ack)</li><li><strong>请描述一个消息在 Pulsar 中的消费流程。特别是消费者如何追踪消费进度？</strong> (Consumer -&gt; Broker -&gt; Broker Read Entries (from Ledger, using Cursor) -&gt; Bookedar -&gt; Broker Deliver -&gt; Consumer Ack -&gt; Broker Update Cursor (in BookKeeper)。追踪进度通过 Cursor)</li><li><strong>Pulsar 如何保证消息的高可用和数据不丢失？</strong> (Broker 无状态 HA，BookKeeper 的 Ledger 复制 HA，持久化刷盘，Ledger 不可变性)</li><li><strong>请对比一下 Pulsar、Kafka 和 RabbitMQ 三者在架构、存储模型、消费模型、核心功能等方面的异同。</strong> (<strong>核心！</strong> 必考题，重点对比：分层 vs Monolithic，BookKeeper vs Log vs Queue，多种订阅 vs Pull vs Push/Pull，Geo-Rep/Tiered Storage vs 其他特性)</li><li><strong>你了解 Pulsar 的地理复制 (Geo-Replication) 或分层存储 (Tiered Storage) 功能吗？它们有什么用？</strong> (Geo-Rep: 跨数据中心复制，灾备/多活。Tiered Storage: 旧数据迁移到冷存储，降低成本)</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Apache Pulsar 是一个面向云原生时代设计的分布式消息和流处理平台，其核心创新在于将消息的 Serving 层和 Storage 层彻底分离，分别由无状态的 Brokers 和有状态的 BookKeeper 集群负责。这种分层架构带来了出色的弹性伸缩、操作弹性和对分层存储的支持。同时，Pulsar 提供了灵活多样的订阅模式，能够满足各种复杂的消费需求。</p><p>理解 Pulsar 的分层架构、BookKeeper 存储机制、多样化的订阅类型以及其 Publish/Consume 工作流程，并将这些与 Kafka 和 RabbitMQ 进行对比，是掌握云原生消息技术栈、进行技术选型并应对面试的关键。</p>',41)]))}const d=r(s,[["render",n],["__file","pulsar-framework.html.vue"]]),p=JSON.parse('{"path":"/pulsar/pulsar-framework.html","title":"","lang":"zh-CN","frontmatter":{"description":"在分布式消息和流处理领域，Apache Kafka 和 RabbitMQ 是两个非常重要的平台。然而，随着云原生和大规模分布式应用的兴起，它们在架构上的某些限制也逐渐显现，特别是在存储层和Serving层紧密耦合方面。例如，Kafka 的 Broker 既负责处理客户端请求，也负责消息的物理存储，这使得在需要弹性伸缩（只扩展处理能力不扩展存储，或反之）...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/pulsar/pulsar-framework.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"在分布式消息和流处理领域，Apache Kafka 和 RabbitMQ 是两个非常重要的平台。然而，随着云原生和大规模分布式应用的兴起，它们在架构上的某些限制也逐渐显现，特别是在存储层和Serving层紧密耦合方面。例如，Kafka 的 Broker 既负责处理客户端请求，也负责消息的物理存储，这使得在需要弹性伸缩（只扩展处理能力不扩展存储，或反之）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-02T07:33:22.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-02T07:33:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-02T07:33:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"深度解析 Apache Pulsar 架构设计：存储与计算分离的云原生消息平台","slug":"深度解析-apache-pulsar-架构设计-存储与计算分离的云原生消息平台","link":"#深度解析-apache-pulsar-架构设计-存储与计算分离的云原生消息平台","children":[{"level":3,"title":"引言：消息队列的演进与 Pulsar 的新范式","slug":"引言-消息队列的演进与-pulsar-的新范式","link":"#引言-消息队列的演进与-pulsar-的新范式","children":[]},{"level":3,"title":"Pulsar 是什么？定位与核心理念","slug":"pulsar-是什么-定位与核心理念","link":"#pulsar-是什么-定位与核心理念","children":[]},{"level":3,"title":"为什么选择 Pulsar？优势分析","slug":"为什么选择-pulsar-优势分析","link":"#为什么选择-pulsar-优势分析","children":[]},{"level":3,"title":"Pulsar 架构设计与核心组件 (重点)","slug":"pulsar-架构设计与核心组件-重点","link":"#pulsar-架构设计与核心组件-重点","children":[]},{"level":3,"title":"Pulsar 工作流程 (Publish/Consume 详细)","slug":"pulsar-工作流程-publish-consume-详细","link":"#pulsar-工作流程-publish-consume-详细","children":[]},{"level":3,"title":"高可用与数据一致性","slug":"高可用与数据一致性","link":"#高可用与数据一致性","children":[]},{"level":3,"title":"Pulsar 关键特性回顾","slug":"pulsar-关键特性回顾","link":"#pulsar-关键特性回顾","children":[]},{"level":3,"title":"常见应用场景","slug":"常见应用场景","link":"#常见应用场景","children":[]},{"level":3,"title":"Pulsar vs Kafka vs RabbitMQ 对比分析 (重点)","slug":"pulsar-vs-kafka-vs-rabbitmq-对比分析-重点","link":"#pulsar-vs-kafka-vs-rabbitmq-对比分析-重点","children":[]},{"level":3,"title":"理解 Pulsar 架构与使用方式的价值","slug":"理解-pulsar-架构与使用方式的价值","link":"#理解-pulsar-架构与使用方式的价值","children":[]},{"level":3,"title":"Pulsar 为何是面试热点","slug":"pulsar-为何是面试热点","link":"#pulsar-为何是面试热点","children":[]},{"level":3,"title":"面试问题示例与深度解析","slug":"面试问题示例与深度解析","link":"#面试问题示例与深度解析","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1746171202000,"updatedTime":1746171202000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":15.29,"words":4588},"filePathRelative":"pulsar/pulsar-framework.md","localizedDate":"2025年5月2日","autoDesc":true}');export{d as comp,p as data};

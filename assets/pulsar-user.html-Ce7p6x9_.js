import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as e}from"./app-17qzZVk7.js";const p={};function o(c,n){return e(),a("div",null,n[0]||(n[0]=[t(`<p>好的，各位中高级Java工程师朋友们！</p><p>在上一篇文章中，我们深入探讨了 Apache Pulsar 的架构设计，特别是其存储与计算分离的核心理念，以及 Broker、BookKeeper、Ledger、Subscription 等关键概念。理解 Pulsar 的架构原理，是掌握其强大之处的基础。然而，将理论转化为实践，知道如何在 Java 应用中正确地使用 Pulsar 客户端进行消息的生产和消费，并配置各种高级特性，同样至关重要。</p><p>本篇文章将作为上一篇的实践篇，带领大家从架构走向代码，详细讲解如何在 Java 中使用 Pulsar Client，并结合代码示例和配置，深入理解各种使用方式背后的原理和最佳实践。这对于将 Pulsar 应用于实际项目、解决使用中的问题、并自信应对面试官考察你的实战能力至关重要。</p><p>今天，我们就来动手实践，看看如何在 Java 世界里驾驭 Apache Pulsar！</p><hr><h2 id="apache-pulsar-使用教程-从架构到实践-构建高效消息应用" tabindex="-1"><a class="header-anchor" href="#apache-pulsar-使用教程-从架构到实践-构建高效消息应用"><span>Apache Pulsar 使用教程：从架构到实践，构建高效消息应用</span></a></h2><h3 id="引言-从架构原理到代码实现" tabindex="-1"><a class="header-anchor" href="#引言-从架构原理到代码实现"><span>引言：从架构原理到代码实现</span></a></h3><p>理解一个分布式系统的架构能帮助我们知其所以然，但掌握其使用方式才能真正将技术落地。Apache Pulsar 的强大之处，最终都要通过其客户端 API 在我们的应用中体现。</p><p>本篇文章旨在：</p><ul><li>提供使用 Pulsar Java Client 进行消息生产和消费的详细指南。</li><li>结合代码示例和配置，讲解常用功能的使用方式。</li><li>将使用中的配置和 API 与之前讲解的架构概念（如持久性、订阅类型、Cursor）关联起来。</li><li>帮助开发者将 Pulsar 架构理解转化为实际开发和问题排查能力。</li><li>为应对面试中关于 Pulsar 使用和实践的问题做准备。</li></ul><p>在开始之前，请确保你已经理解了 Pulsar 的核心概念和架构设计（建议先阅读我们之前的相关文章）。</p><h3 id="前置知识回顾-简要" tabindex="-1"><a class="header-anchor" href="#前置知识回顾-简要"><span>前置知识回顾 (简要)</span></a></h3><ul><li><strong>Broker：</strong> 无状态计算层，处理客户端请求。</li><li><strong>BookKeeper：</strong> 有状态存储层，存储消息的 Ledger。</li><li><strong>Topic：</strong> 消息的逻辑分类，可分区 (Partitioned Topic)。</li><li><strong>Subscription：</strong> 消费者组消费 Topic 的方式，有多种类型 (Exclusive, Shared, Failover, Key_Shared)。</li><li><strong>Cursor：</strong> 持久化存储在 BookKeeper 中的消费进度。</li><li><strong>Ledger &amp; Entry：</strong> BookKeeper 中的存储单元。</li></ul><h3 id="pulsar-java-client-环境搭建" tabindex="-1"><a class="header-anchor" href="#pulsar-java-client-环境搭建"><span>Pulsar Java Client 环境搭建</span></a></h3><ol><li><p><strong>添加依赖：</strong> 在 Maven 或 Gradle 项目中添加 Pulsar Java Client 依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.pulsar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pulsar-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>注意：如果使用 Pulsar 2.8.0 及以上版本，推荐使用 <code>pulsar-client-all</code> 依赖以简化依赖管理。</em></p></li><li><p><strong>连接 Pulsar 集群：</strong> 使用 <code>PulsarClient</code> 连接到 Pulsar 集群。<code>serviceUrl</code> 指向 Pulsar Broker 的地址。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>pulsar<span class="token punctuation">.</span>client<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">PulsarClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>pulsar<span class="token punctuation">.</span>client<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">PulsarClientException</span></span><span class="token punctuation">;</span>

<span class="token comment">// 你的 Pulsar 集群地址</span>
<span class="token class-name">String</span> serviceUrl <span class="token operator">=</span> <span class="token string">&quot;pulsar://localhost:6650&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 或 pulsar+ssl://...</span>

<span class="token class-name">PulsarClient</span> client <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    client <span class="token operator">=</span> <span class="token class-name">PulsarClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">serviceUrl</span><span class="token punctuation">(</span>serviceUrl<span class="token punctuation">)</span>
            <span class="token comment">// 可选配置：认证、连接超时、操作超时、线程池等</span>
            <span class="token comment">// .authentication(AuthenticationFactory.token(&quot;your-auth-token&quot;))</span>
            <span class="token comment">// .connectionTimeout(30, TimeUnit.SECONDS)</span>
            <span class="token comment">// .operationTimeout(30, TimeUnit.SECONDS)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Pulsar Client created successfully.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PulsarClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to create Pulsar Client: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// ... 使用 client 创建 Producer 或 Consumer</span>

<span class="token comment">// 应用关闭时关闭 client</span>
<span class="token comment">// if (client != null) {</span>
<span class="token comment">//     client.close();</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>认证 (Authentication)：</strong> 如果 Pulsar 集群开启了认证，需要在构建 <code>PulsarClient</code> 时进行配置，例如使用 Token 认证或 TLS 认证。</p></li></ol><h3 id="topic-管理与类型-简要" tabindex="-1"><a class="header-anchor" href="#topic-管理与类型-简要"><span>Topic 管理与类型 (简要)</span></a></h3><ul><li><strong>命名规范：</strong> Pulsar 的 Topic 名称格式为 <code>{persistent|non-persistent}://tenant/namespace/topic</code>。 <ul><li><code>persistent</code> 或 <code>non-persistent</code>：指定消息是否需要持久化存储。</li><li><code>tenant</code>：租户名称。</li><li><code>namespace</code>：命名空间名称。</li><li><code>topic</code>：主题名称。</li><li>例如：<code>persistent://public/default/my-first-topic</code>。</li></ul></li><li><strong>分区 Topic (Partitioned Topic)：</strong> 为了实现水平扩展，Topic 可以被分区。一个分区 Topic 包含多个内部 Topic（分区），数据分布在这些分区上。在创建生产者或消费者时，直接使用分区 Topic 的名称，Client 会自动与各个分区交互。</li><li><strong>创建 Topic：</strong> 当生产者第一次连接到 Topic 时，如果 Topic 不存在，Pulsar 会自动创建它（默认非分区 Topic）。也可以使用 Pulsar Admin Client 或命令行工具显式创建分区 Topic 并指定分区数量。</li></ul><h3 id="生产者-producer-使用方式详细" tabindex="-1"><a class="header-anchor" href="#生产者-producer-使用方式详细"><span>生产者 (Producer) 使用方式详细</span></a></h3><p>生产者负责创建消息并发送到 Topic。</p><ol><li><p><strong>创建 Producer：</strong> 使用 <code>PulsarClient</code> 构建 <code>Producer</code> 实例，指定要发送消息的 Topic。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>pulsar<span class="token punctuation">.</span>client<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Producer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>pulsar<span class="token punctuation">.</span>client<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Schema</span></span><span class="token punctuation">;</span> <span class="token comment">// 用于指定消息体 Schema</span>

<span class="token class-name">String</span> topicName <span class="token operator">=</span> <span class="token string">&quot;persistent://public/default/my-topic&quot;</span><span class="token punctuation">;</span>

<span class="token class-name">Producer</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> producer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 默认使用 byte[] 作为消息体类型</span>
<span class="token comment">// Producer&lt;String&gt; stringProducer = null; // 使用 String Schema</span>
<span class="token comment">// Producer&lt;MyPojo&gt; pojoProducer = null; // 使用 Pojo Schema</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    producer <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span>topicName<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">producerName</span><span class="token punctuation">(</span><span class="token string">&quot;my-producer-001&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 可选，指定生产者名称</span>
            <span class="token comment">// 更多配置选项...</span>
            <span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Producer created for topic: &quot;</span> <span class="token operator">+</span> topicName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PulsarClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to create producer: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>发送选项 (Configuration)：</strong> 在创建 Producer 时可以配置多种发送行为。</p><ul><li><code>enableBatching(boolean)</code>: 是否开启批量发送（默认 true）。将多条消息聚合成一批发送，减少网络请求次数，提高吞吐。</li><li><code>batchingMaxMessages(int)</code>: 批量发送最大消息数。</li><li><code>batchingMaxPublishDelay(long, TimeUnit)</code>: 批量发送最大等待时间。</li><li><code>compressionType(CompressionType)</code>: 消息压缩类型 (LZ4, ZLIB, ZSTD, SNAPPY)。</li><li><strong><code>acks(int)</code>:</strong> 消息发送的确认机制。<strong>关联 BookKeeper 持久性</strong>。 <ul><li><code>0</code>：不等待 Broker 确认，发送即返回成功。<strong>吞吐量最高，但可能丢消息。</strong></li><li><code>1</code>：等待 Leader Bookie 写入成功。<strong>性能次之，Leader Bookie 故障可能丢消息。</strong></li><li><code>all</code> (或 <code>-1</code>)：等待配置的写法定人数 (Write Quorum) 个 Bookie 节点写入成功。<strong>可靠性最高，能保证已确认消息不丢失。</strong> 默认值通常根据 BookKeeper 集群配置决定。</li></ul></li><li><code>messageRoutingMode(MessageRoutingMode)</code>: 消息路由模式 (RoundRobinPartition, SinglePartition, ConsistentHashing). 如何选择分区发送。</li><li><code>messageKey(String)</code> / <code>messageKeyBytes(byte[])</code>: 设置消息 Key。用于消息路由到指定分区（Key 的 Hash）或顺序消息。</li><li><code>properties(Map&lt;String, String&gt;)</code>: 设置消息属性（Metadata），用于过滤、业务标识等。</li></ul></li><li><p><strong>发送消息方式：</strong></p><ul><li><strong>同步发送 (<code>send(byte[] message)</code>)：</strong> 阻塞当前线程，直到消息成功发送（或失败）。适用于对发送结果强感知、对吞吐要求不极致的场景。<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">MessageId</span> msgId <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Pulsar - Sync!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Message sent successfully: &quot;</span> <span class="token operator">+</span> msgId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PulsarClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Message send failed: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>异步发送 (<code>sendAsync(byte[] message)</code>)：</strong> 立即返回一个 <code>CompletableFuture</code>，发送操作在后台执行。适用于需要高吞吐的场景，通过注册回调处理结果。<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>producer<span class="token punctuation">.</span><span class="token function">sendAsync</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Pulsar - Async!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>msgId <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Message sent successfully (async): &quot;</span> <span class="token operator">+</span> msgId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Message send failed (async): &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>单向发送 (<code>sendAsync(byte[] message).get()</code> 或 <code>sendAsync(byte[] message).exceptionally(...)</code>)：</strong> 异步发送，但可以阻塞等待结果 (<code>get()</code>) 或只关注异常 (<code>exceptionally()</code>)。</li></ul></li><li><p><strong>消息 Key, Properties 的使用：</strong></p><ul><li>发送顺序消息：确保相同 Key 的消息发送到同一个分区，Producer 配置 <code>messageRoutingMode(MessageRoutingMode.HashingStickinessConsistency)</code> 或默认模式。</li><li>消息过滤：消费者可以根据消息 Key 或 Properties 进行过滤。</li><li>业务标识：在 Properties 中携带业务相关信息。</li></ul></li></ol><h3 id="消费者-consumer-使用方式详细" tabindex="-1"><a class="header-anchor" href="#消费者-consumer-使用方式详细"><span>消费者 (Consumer) 使用方式详细</span></a></h3><p>消费者负责订阅 Topic 并接收消息。</p><ol><li><p><strong>创建 Consumer：</strong> 使用 <code>PulsarClient</code> 构建 <code>Consumer</code> 实例，指定要订阅的 Topic(s) 和<strong>订阅信息</strong>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>pulsar<span class="token punctuation">.</span>client<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Consumer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>pulsar<span class="token punctuation">.</span>client<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">SubscriptionType</span></span><span class="token punctuation">;</span> <span class="token comment">// 导入订阅类型</span>

<span class="token class-name">String</span> topicName <span class="token operator">=</span> <span class="token string">&quot;persistent://public/default/my-topic&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> subscriptionName <span class="token operator">=</span> <span class="token string">&quot;my-subscription&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 订阅名称，用于追踪消费进度</span>

<span class="token class-name">Consumer</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> consumer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 默认使用 byte[] 消息体</span>
<span class="token comment">// Consumer&lt;String&gt; stringConsumer = null;</span>
<span class="token comment">// Consumer&lt;MyPojo&gt; pojoConsumer = null;</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
    consumer <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span>topicName<span class="token punctuation">)</span> <span class="token comment">// 订阅单个 Topic</span>
            <span class="token comment">// .topics(Arrays.asList(&quot;topic1&quot;, &quot;topic2&quot;)) // 订阅多个 Topic</span>
            <span class="token punctuation">.</span><span class="token function">subscriptionName</span><span class="token punctuation">(</span>subscriptionName<span class="token punctuation">)</span> <span class="token comment">// 指定订阅名称</span>
            <span class="token punctuation">.</span><span class="token function">subscriptionType</span><span class="token punctuation">(</span><span class="token class-name">SubscriptionType<span class="token punctuation">.</span>Shared</span><span class="token punctuation">)</span> <span class="token comment">// **重点：指定订阅类型！**</span>
            <span class="token comment">// .autoCommitAcknowledgement(true) // 自动 Ack (默认 true)</span>
            <span class="token comment">// 更多配置选项...</span>
            <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer created for topic: &quot;</span> <span class="token operator">+</span> topicName <span class="token operator">+</span> <span class="token string">&quot;, subscription: &quot;</span> <span class="token operator">+</span> subscriptionName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PulsarClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to create consumer: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>创建 Consumer 时指定订阅类型 (重点)：</strong> <strong>关联架构中订阅类型详解。</strong> 这是 Pulsar 的关键特性，决定了消息如何投递给消费组内的消费者实例以及如何分配 Partition 的消费权。</p><ul><li><strong><code>SubscriptionType.Exclusive</code> (独占)：</strong> 只有一个消费者连接到此订阅。适用于严格顺序处理或主备模式。</li><li><strong><code>SubscriptionType.Shared</code> (共享)：</strong> 多个消费者可以连接到此订阅，消息在消费者间轮询分发。适用于并行处理和负载均衡，支持自动扩展。</li><li><strong><code>SubscriptionType.Failover</code> (失效转移)：</strong> 多个消费者连接，但只有一个主消费者接收所有消息。其他消费者备用，主消费者失败后自动切换。适用于主备高可用场景。</li><li><strong><code>SubscriptionType.Key_Shared</code> (键共享)：</strong> 多个消费者连接，相同 Key 的消息投递给同一个消费者。保证基于 Key 的局部顺序，并支持并行。</li><li><strong>选择依据：</strong> 根据业务对消息顺序性、并行处理、高可用模式的需求选择。Shared 是最常用的通用模式。</li></ul></li><li><p><strong>接收消息方式：</strong></p><ul><li><strong>同步接收 (<code>receive()</code>)：</strong> 阻塞当前线程，直到收到一条消息。适用于简单场景或批量处理。<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">Message</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> msg <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message: &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息处理完成后，发送确认</span>
    consumer<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 手动 Ack</span>
    <span class="token comment">// consumer.acknowledgeAsync(msg); // 异步 Ack</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PulsarClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to receive message: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>异步接收 (<code>receiveAsync()</code>)：</strong> 立即返回 <code>CompletableFuture</code>，接收操作在后台执行。适用于非阻塞应用。<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>consumer<span class="token punctuation">.</span><span class="token function">receiveAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenAccept</span><span class="token punctuation">(</span>msg <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message (async): &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息处理完成后，发送确认</span>
    consumer<span class="token punctuation">.</span><span class="token function">acknowledgeAsync</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to receive message (async): &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 需要循环或事件循环来持续接收异步消息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>使用 MessageListener：</strong> 在创建 Consumer 时注册一个 <code>MessageListener</code>，当收到消息时回调监听器方法。这是 Push 模式消费的底层实现。<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>pulsar<span class="token punctuation">.</span>client<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">MessageListener</span></span><span class="token punctuation">;</span>

consumer <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span>topicName<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscriptionName</span><span class="token punctuation">(</span>subscriptionName<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscriptionType</span><span class="token punctuation">(</span><span class="token class-name">SubscriptionType<span class="token punctuation">.</span>Shared</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">messageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">received</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> consumer<span class="token punctuation">,</span> <span class="token class-name">Message</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message (listener): &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, ID: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 消息处理完成后，发送确认</span>
                    consumer<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// listener 中通常使用此方式 Ack</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Error processing message: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 处理失败，发送否定确认，消息会重投 (可能进入 DLQ)</span>
                    consumer<span class="token punctuation">.</span><span class="token function">negativeAcknowledge</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 在 listener 模式下，主线程通常无需 receive()，只需保持应用运行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>消息确认 (Acknowledgement) - 关键：</strong> <strong>为什么需要 Ack?</strong> Ack 是消费者向 Broker 发送的信号，表示该消息已经被成功处理。Broker 收到 Ack 后，会更新该订阅的 Cursor (游标)，标记该消息及其之前的所有消息为已消费。这是保证消息<strong>不重复投递</strong>和<strong>追踪消费进度</strong>的关键。如果消息未 Ack，Broker 会认为消息未被成功处理，在一定条件下（如消费者断开连接、重平衡、否定确认）会将消息<strong>重投</strong>给其他消费者或同一消费者。Ack 是<strong>原子性</strong>的，Ack 某个 Offset 意味着该 Offset 及其之前的所有消息都被标记为已消费。<strong>关联 Cursor 更新到 BookKeeper</strong>：消费者提交的 Ack 信息最终会被 Broker 持久化到 BookKeeper 中该订阅对应的 Cursor 位置，保证消费进度的不丢失。</p><ul><li><code>acknowledge(MessageId msgId)</code> / <code>acknowledge(Message&lt;T&gt; msg)</code>：手动确认单条消息。</li><li><code>acknowledgeAsync(MessageId msgId)</code> / <code>acknowledgeAsync(Message&lt;T&gt; msg)</code>：异步手动确认单条消息。</li><li><code>acknowledgeCumulative(MessageId msgId)</code>：累计确认，确认该 MessageId 及其之前所有未确认的消息。</li><li><code>negativeAcknowledge(MessageId msgId)</code> / <code>negativeAcknowledge(Message&lt;T&gt; msg)</code>：否定确认。告诉 Broker 该消息处理失败，Broker 会在稍后<strong>重投</strong>这条消息。</li><li><code>redeliverUnacknowledgedMessages()</code>：手动触发重投所有之前未确认的消息（通常在处理失败后调用）。</li><li><strong>自动 Ack vs 手动 Ack：</strong> <code>autoCommitAcknowledgement(boolean)</code> (默认 true) 开启自动确认。自动确认在消费者<strong>接收</strong>到消息后自动发送 Ack，<strong>可能导致消息在未处理成功时丢失</strong>。强烈建议<strong>禁用自动确认</strong>，使用<strong>手动确认</strong>，在<strong>消息处理成功后</strong>再发送 Ack，保证 At-least-once 语义。</li></ul></li></ol><h3 id="pulsar-高级功能使用-代码-配置示例" tabindex="-1"><a class="header-anchor" href="#pulsar-高级功能使用-代码-配置示例"><span>Pulsar 高级功能使用 (代码/配置示例)</span></a></h3><ul><li><strong>顺序消息：</strong><ul><li>生产者：发送消息时设置 <code>messageKey</code>。Producer 配置使用基于 Key 的路由模式（如默认模式或 <code>messageRoutingMode(MessageRoutingMode.HashingStickinessConsistency)</code>）。</li><li>消费者：使用 <strong><code>SubscriptionType.Key_Shared</code> 订阅</strong>。</li><li><strong>关联：</strong> 确保相同 Key 消息进入同一 Partition，Key_Shared 订阅确保相同 Key 消息始终由同一个消费者处理。</li></ul></li><li><strong>定时/延时消息：</strong><ul><li>生产者：发送消息时设置消息的延时投递属性。<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>producer<span class="token punctuation">.</span><span class="token function">newMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;Delayed message&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">deliverAfter</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span> <span class="token comment">// 延迟 10 分钟投递</span>
        <span class="token comment">// 或 .deliverAt(timestamp) // 指定一个具体的时间戳投递</span>
        <span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>原理：</strong> 消息发送后，Broker 不会立即将消息指针放入 ConsumeQueue，而是存放在一个延时消息的内部结构中，到期后再放入 ConsumeQueue。</li></ul></li><li><strong>死信队列 (DLQ)：</strong> Pulsar 支持自动将多次消费失败（如多次否定确认 <code>negativeAcknowledge</code> 或多次重试后仍未 Ack）的消息发送到死信队列。 <ul><li><strong>配置：</strong> 在 Consumer 构建器中配置 <code>deadLetterPolicy</code>。<div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>consumer <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span>topicName<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscriptionName</span><span class="token punctuation">(</span>subscriptionName<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscriptionType</span><span class="token punctuation">(</span><span class="token class-name">SubscriptionType<span class="token punctuation">.</span>Shared</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">enableRetry</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 开启重试 (默认 true)</span>
        <span class="token punctuation">.</span><span class="token function">deadLetterPolicy</span><span class="token punctuation">(</span><span class="token class-name">DeadLetterPolicy</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">maxRedeliverCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 最大重试次数</span>
                <span class="token punctuation">.</span><span class="token function">deadLetterTopic</span><span class="token punctuation">(</span><span class="token string">&quot;persistent://public/default/my-dlq-topic&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 死信 Topic 名称</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>原理：</strong> 当消息重试次数达到阈值，Broker 会将其发送到配置的死信 Topic。</li></ul></li><li><strong>消息过滤：</strong><ul><li><strong>Broker 端过滤 (按 Tag 或 SQL92)：</strong> 生产者发送时设置 <code>Tag</code> 或 <code>Properties</code>。消费者订阅时使用 <code>messageSelector</code> (SQL92 语法) 或 <code>subscriptionTopicsMode(SubscriptionTopicsMode.TAG)</code> (Tag 过滤模式)。</li><li><strong>消费者端过滤：</strong> 在消费者接收到消息后，根据业务逻辑进行过滤。</li></ul></li></ul><h3 id="在-spring-boot-中集成-pulsar-推荐方式" tabindex="-1"><a class="header-anchor" href="#在-spring-boot-中集成-pulsar-推荐方式"><span>在 Spring Boot 中集成 Pulsar (推荐方式)</span></a></h3><p>在 Spring Boot 应用中，推荐使用 Spring Cloud Stream Binder for Pulsar 或第三方的 Pulsar Spring Boot Starter，它们提供了自动配置和便捷的 Spring 集成。</p><ol><li><p><strong>添加依赖：</strong> 引入 Spring Boot Parent POM，然后添加 Pulsar Spring Boot Starter 依赖（例如 Spring Cloud Alibaba RocketMQ/Pulsar Starter 或社区的 Pulsar Starter）。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-stream-rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>注意：目前 Spring Cloud 官方没有直接提供 Pulsar Binder，社区有一些实现。如果使用 Spring Cloud Alibaba，他们有 RocketMQ 的 Starter，但直接的 Pulsar Starter 可能需要查找社区项目或 Spring Cloud Stream 的 Binder。</em></p></li><li><p><strong>配置：</strong> 在 <code>application.yml</code> 中配置 Pulsar 连接信息、生产者和消费者属性。Starter 会自动配置 <code>PulsarClient</code> Bean。</p><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token comment"># application.yml</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">pulsar</span><span class="token punctuation">:</span> <span class="token comment"># 或其他 starter 定义的配置前缀</span>
    <span class="token key atrule">client</span><span class="token punctuation">:</span>
      <span class="token key atrule">service-url</span><span class="token punctuation">:</span> pulsar<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">6650</span>
      <span class="token comment"># 其他客户端配置</span>
    <span class="token key atrule">producer</span><span class="token punctuation">:</span>
      <span class="token comment"># 全局生产者配置</span>
      <span class="token comment"># send-timeout: 10s</span>
    <span class="token key atrule">consumer</span><span class="token punctuation">:</span>
      <span class="token comment"># 全局消费者配置</span>
      <span class="token comment"># auto-commit-acknowledgement: false # 禁用自动 Ack</span>

<span class="token comment"># Spring Cloud Stream 配置 (如果使用 Spring Cloud Stream Binder)</span>
<span class="token comment"># spring:</span>
<span class="token comment">#   cloud:</span>
<span class="token comment">#     stream:</span>
<span class="token comment">#       bindings:</span>
<span class="token comment">#         inputChannel:</span>
<span class="token comment">#           destination: my-topic</span>
<span class="token comment">#           group: my-subscription # 订阅名称</span>
<span class="token comment">#           consumer:</span>
<span class="token comment">#             enable-dlq: true # 启用 DLQ</span>
<span class="token comment">#             max-attempts: 3 # 最大重试</span>
<span class="token comment">#             subscription-type: shared # 订阅类型</span>
<span class="token comment">#         outputChannel:</span>
<span class="token comment">#           destination: another-topic</span>
<span class="token comment">#       rocketmq: # 或 pulsar (取决于 Binder)</span>
<span class="token comment">#         binder:</span>
<span class="token comment">#           name-server: localhost:9876 # RocketMQ NameServer (示例)</span>
<span class="token comment">#         bindings:</span>
<span class="token comment">#           inputChannel:</span>
<span class="token comment">#             consumer:</span>
<span class="token comment">#               subscription: my-subscription # 订阅名称</span>
<span class="token comment">#               consumeMode: CLUSTERING # 集群消费</span>
<span class="token comment">#               subscriptionType: SHARE # RocketMQ Starter 中的订阅类型定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>使用：</strong> 注入自动配置的 <code>PulsarClient</code> Bean 或 <code>RocketMQTemplate</code> (取决于 Starter)，或者使用 Spring Cloud Stream 定义的 Source/Sink 接口。</p></li></ol><h3 id="理解-pulsar-使用方式的价值" tabindex="-1"><a class="header-anchor" href="#理解-pulsar-使用方式的价值"><span>理解 Pulsar 使用方式的价值</span></a></h3><ul><li><strong>将架构知识转化为实践：</strong> 将对 Pulsar 架构的理解应用于实际的客户端配置和代码编写中。</li><li><strong>灵活使用 Pulsar 特性：</strong> 掌握多种订阅模式、Ack 机制、定时消息、DLQ 等核心功能的使用。</li><li><strong>提高代码质量和可靠性：</strong> 知道如何正确配置生产者 Ack 和消费者 Ack，避免消息丢失和重复。</li><li><strong>深入对比选型：</strong> 通过实际使用了解 Pulsar 的操作体验和功能特点，为与其他 MQ 的选型对比提供实践依据。</li><li><strong>应对面试：</strong> 面试官常会结合实际使用场景来考察对 Pulsar 的掌握程度。</li></ul><h3 id="pulsar-使用方式为何是面试热点" tabindex="-1"><a class="header-anchor" href="#pulsar-使用方式为何是面试热点"><span>Pulsar 使用方式为何是面试热点</span></a></h3><ul><li><strong>考察实际动手能力：</strong> 会用是基础。</li><li><strong>考察架构影响用法：</strong> 面试官会问为什么这样配置 Ack？为什么选择这种订阅类型？这要求你将用法与架构原理关联起来。</li><li><strong>考察核心特性：</strong> 订阅类型、Ack 机制、顺序消息、定时消息等是 Pulsar 的独特或重要特性，常结合使用场景提问。</li><li><strong>考察与 Spring 的集成：</strong> 考察在 Java 主流框架中使用 Pulsar 的能力。</li></ul><h3 id="面试问题示例与深度解析" tabindex="-1"><a class="header-anchor" href="#面试问题示例与深度解析"><span>面试问题示例与深度解析</span></a></h3><ul><li><strong>如何在 Java 中连接到 Pulsar 集群？需要哪些核心配置？</strong> (回答 <code>PulsarClient.builder().serviceUrl(...)</code>，配置服务地址，可选认证)</li><li><strong>请描述一下在 Java 中创建 Pulsar Producer 的过程。有哪些重要的配置选项？</strong> (回答 <code>client.newProducer().topic(...).create()</code>。重要配置：<code>acks</code>, <code>enableBatching</code>, <code>messageRoutingMode</code>, <code>messageKey</code>)</li><li><strong>Producer 的 <code>acks</code> 参数有什么作用？设置为 <code>all</code> 有什么意义？它与 BookKeeper 的持久性有什么关系？</strong> (<strong>核心！</strong> 回答确认机制，<code>acks=all</code> 等待写法定人数 Bookie 确认。关系：保证消息写入 BookKeeper 集群的持久性)</li><li><strong>请描述一下在 Java 中创建 Pulsar Consumer 的过程。需要指定哪些核心信息？</strong> (回答 <code>client.newConsumer().topic(...).subscriptionName(...).subscriptionType(...).create()</code>。核心信息：Topic(s), Subscription Name, Subscription Type)</li><li><strong>Pulsar 的订阅 (Subscription) 有哪几种类型？请说明在 Java 中如何创建 Consumer 时指定订阅类型？你通常会根据什么来选择订阅类型？</strong> (<strong>核心！</strong> 回答四种类型：Exclusive, Shared, Failover, Key_Shared。在 <code>client.newConsumer().subscriptionType(...)</code> 指定。选择依据：对消息顺序、并行、高可用的需求)</li><li><strong>请解释一下 Pulsar 的消息确认 (Acknowledgement) 机制。为什么需要 Ack？在 Java 中如何手动发送 Ack？如何处理消费失败的消息？</strong> (<strong>核心！</strong> 回答 Ack 是消费者处理成功的信号，Broker 收到更新 Cursor，保证不重复投递。手动 Ack：<code>consumer.acknowledge(msg)</code> 或 <code>acknowledgeAsync(msg)</code>)。失败：<code>negativeAcknowledge</code> 或不 Ack，Broker 重投)</li><li><strong>消息确认 (Ack) 后，在 Pulsar 的架构底层发生了什么？</strong> (Ack 信息发送给 Broker，Broker 更新该订阅在 BookKeeper 中的 Cursor 位置，持久化消费进度)</li><li><strong>如何在 Java 中发送顺序消息？需要 Producer 和 Consumer 端如何配合？</strong> (Producer 发送时设置 <code>messageKey</code>，并使用 Key 路由模式。Consumer 使用 <code>SubscriptionType.Key_Shared</code> 订阅)</li><li><strong>如何在 Java 中发送延时或定时消息？</strong> (Producer 发送时设置 <code>deliverAfter</code> 或 <code>deliverAt</code> 属性)</li><li><strong>Spring Boot 应用如何集成 Pulsar？需要哪些依赖和配置？</strong> (引入 Pulsar Starter，配置 <code>serviceUrl</code> 等，通常自动配置 <code>PulsarClient</code>，注入使用)</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>掌握 Apache Pulsar 的 Java Client 使用方式，是将对 Pulsar 架构的理解转化为实际开发能力的关键。通过 <code>PulsarClient</code> 构建 Producer 和 Consumer，配置各种发送和接收选项，特别是正确地选择<strong>订阅类型</strong>和处理<strong>消息确认 (Ack)</strong>，是构建可靠、高效 Pulsar 应用的核心。</p><p>理解各种使用方式背后的原理（如 <code>acks</code> 与 BookKeeper 持久性、订阅类型与 Partition 分配、Ack 与 Cursor 更新）能够帮助你更灵活地运用 Pulsar 特性，排查问题，并在面试中展现出扎实的实践功底。</p><p>希望这篇技术文章能帮助你将 Pulsar 的架构知识与 Java 客户端使用完美结合，熟练驾驭 Pulsar 构建高效消息应用！感谢您的阅读。</p>`,38)]))}const u=s(p,[["render",o],["__file","pulsar-user.html.vue"]]),r=JSON.parse('{"path":"/pulsar/pulsar-user.html","title":"","lang":"zh-CN","frontmatter":{"description":"好的，各位中高级Java工程师朋友们！ 在上一篇文章中，我们深入探讨了 Apache Pulsar 的架构设计，特别是其存储与计算分离的核心理念，以及 Broker、BookKeeper、Ledger、Subscription 等关键概念。理解 Pulsar 的架构原理，是掌握其强大之处的基础。然而，将理论转化为实践，知道如何在 Java 应用中正确地...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/pulsar/pulsar-user.html"}],["meta",{"property":"og:site_name","content":"Java八股文网"}],["meta",{"property":"og:description","content":"好的，各位中高级Java工程师朋友们！ 在上一篇文章中，我们深入探讨了 Apache Pulsar 的架构设计，特别是其存储与计算分离的核心理念，以及 Broker、BookKeeper、Ledger、Subscription 等关键概念。理解 Pulsar 的架构原理，是掌握其强大之处的基础。然而，将理论转化为实践，知道如何在 Java 应用中正确地..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-02T07:33:22.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2025-05-02T07:33:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-02T07:33:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Apache Pulsar 使用教程：从架构到实践，构建高效消息应用","slug":"apache-pulsar-使用教程-从架构到实践-构建高效消息应用","link":"#apache-pulsar-使用教程-从架构到实践-构建高效消息应用","children":[{"level":3,"title":"引言：从架构原理到代码实现","slug":"引言-从架构原理到代码实现","link":"#引言-从架构原理到代码实现","children":[]},{"level":3,"title":"前置知识回顾 (简要)","slug":"前置知识回顾-简要","link":"#前置知识回顾-简要","children":[]},{"level":3,"title":"Pulsar Java Client 环境搭建","slug":"pulsar-java-client-环境搭建","link":"#pulsar-java-client-环境搭建","children":[]},{"level":3,"title":"Topic 管理与类型 (简要)","slug":"topic-管理与类型-简要","link":"#topic-管理与类型-简要","children":[]},{"level":3,"title":"生产者 (Producer) 使用方式详细","slug":"生产者-producer-使用方式详细","link":"#生产者-producer-使用方式详细","children":[]},{"level":3,"title":"消费者 (Consumer) 使用方式详细","slug":"消费者-consumer-使用方式详细","link":"#消费者-consumer-使用方式详细","children":[]},{"level":3,"title":"Pulsar 高级功能使用 (代码/配置示例)","slug":"pulsar-高级功能使用-代码-配置示例","link":"#pulsar-高级功能使用-代码-配置示例","children":[]},{"level":3,"title":"在 Spring Boot 中集成 Pulsar (推荐方式)","slug":"在-spring-boot-中集成-pulsar-推荐方式","link":"#在-spring-boot-中集成-pulsar-推荐方式","children":[]},{"level":3,"title":"理解 Pulsar 使用方式的价值","slug":"理解-pulsar-使用方式的价值","link":"#理解-pulsar-使用方式的价值","children":[]},{"level":3,"title":"Pulsar 使用方式为何是面试热点","slug":"pulsar-使用方式为何是面试热点","link":"#pulsar-使用方式为何是面试热点","children":[]},{"level":3,"title":"面试问题示例与深度解析","slug":"面试问题示例与深度解析","link":"#面试问题示例与深度解析","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1746171202000,"updatedTime":1746171202000,"contributors":[{"name":"Yideng","email":"oointer@163.com","commits":1}]},"readingTime":{"minutes":15.77,"words":4732},"filePathRelative":"pulsar/pulsar-user.md","localizedDate":"2025年5月2日","autoDesc":true}');export{u as comp,r as data};
